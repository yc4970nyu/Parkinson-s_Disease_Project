# -*- coding: utf-8 -*-
"""1.0_Parkinson_VR_Performance_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m-zm1hfRAbhb3gUb85cXadqUhxzB15bS
"""

def hit_converter(file_path):
    """
    Extracts the data info when hitting the object, and for the corresponding record, store the "allowedHand",
    "objectSpawnHeight", "gameTimeWhenSpawned", "gameTimeWhenHit", "timeToHitDelta", "timeToPointDelta",
    "hitForceMagnitude", and its "hitCollectionTime" into a dataframe, where each row represents a trial.
    Here only taking the first force record of the hit(This could be altered in subsequent investigation if needed)
    """
    import json
    import pandas as pd
    with open(file_path, 'r') as file:
        data=json.load(file)
    extracted_data = []
    for round_info in data['listOfAllRounds']:
        for level in round_info['levelsPlayed']:
            for target in level['targetSpawnedList']:
                if target['wasObjectHit'] == "Yes":
                    # Only taking the first hitData entry
                    hitData=target['hitDataList'][0]
                    extracted_data.append({
                        "allowedHand":target['allowedHand'],
                        "objectSpawnHeight":target['objectSpawnHeight'],
                        "gameTimeWhenSpawned":target['gameTimeWhenSpawned'],
                        "gameTimeWhenHit":target['gameTimeWhenHit'],
                        "timeToHitDelta":target['timeToHitDelta'],
                        "timeToPointDelta":target['timeToPointDelta'],
                        "hitForceMagnitude":hitData['hitForceMagnitude'],
                        "hitCollectionTime":hitData['collectionTime']
                    })
    df=pd.DataFrame(extracted_data)
    return df
hit_converter("PixelPluckerVR_StoredData.json")

def hitAccuracy(file_path):
    import json
    with open(file_path, 'r') as file:
        data=json.load(file)
    #counters
    hit_count=0
    total_count=0

    # Count total trials and the successful trials
    for round_info in data['listOfAllRounds']:
        for level in round_info['levelsPlayed']:
            for target in level['targetSpawnedList']:
                total_count+=1
                if target['wasObjectHit']=="Yes":
                    hit_count+=1

    accuracy=round(hit_count/total_count, 4) if total_count>0 else 0
    return accuracy
hitAccuracy("PixelPluckerVR_StoredData.json")

def average_hit_force(file_path):
    """
    This computes the average magnitude of the force used when hitting objects.
    """
    import json
    with open(file_path, 'r') as file:
        data=json.load(file)

    total_force=0
    hit_count=0

    for round_info in data['listOfAllRounds']:
        for level in round_info['levelsPlayed']:
            for target in level['targetSpawnedList']:
                if target['wasObjectHit']=="Yes":
                    for hitData in target['hitDataList']:
                        total_force+=hitData['hitForceMagnitude']
                        hit_count+=1

    average_force=total_force/hit_count if hit_count else 0
    return average_force

def highest_score(file_path):
    """
    Identifying the highest score achieved in all rounds.
    """
    import json
    with open(file_path, 'r') as file:
        data = json.load(file)

    highest_score=max([round_info['totalPointsEarned'] for round_info in data['listOfAllRounds']])
    return highest_score

def most_used_hand(file_path):
    """
    Identifying if hitting items is done more often with the left or right hand.
    """
    import json
    with open(file_path, 'r') as file:
        data=json.load(file)

    hand_usage={'Left':0,'Right':0}

    for round_info in data['listOfAllRounds']:
        for level in round_info['levelsPlayed']:
            for target in level['targetSpawnedList']:
                if target['wasObjectHit']=="Yes":
                    hand_usage[target['allowedHand']]+=1

    return max(hand_usage, key=hand_usage.get)
most_used_hand("PixelPluckerVR_StoredData.json")

def average_time_to_hit(file_path):
    """
    It computes the average time taken to hit the objects from when they are spawned.
    """
    import json
    with open(file_path, 'r') as file:
        data=json.load(file)

    total_time=0
    hit_count=0

    for round_info in data['listOfAllRounds']:
        for level in round_info['levelsPlayed']:
            for target in level['targetSpawnedList']:
                if target['wasObjectHit']=="Yes":
                    total_time+=target['timeToHitDelta']
                    hit_count+=1

    average_time=total_time/hit_count if hit_count else 0
    return average_time

def player_improvement(file_path):
    """
    It keeps tracking the improvement of players over time by comparing scores across rounds.

    """
    import json
    with open(file_path, 'r') as file:
        data=json.load(file)
    #Loop in round for scores computation
    scores_over_time=[round_info['totalPointsEarned'] for round_info in data['listOfAllRounds']]
    improvement=[j-i for i, j in zip(scores_over_time[:-1], scores_over_time[1:])]
    return improvement





